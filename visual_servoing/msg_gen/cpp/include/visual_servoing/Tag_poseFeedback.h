/* Auto-generated by genmsg_cpp for file /home/marc/electric_workspace/visual_servoing/msg/Tag_poseFeedback.msg */
#ifndef VISUAL_SERVOING_MESSAGE_TAG_POSEFEEDBACK_H
#define VISUAL_SERVOING_MESSAGE_TAG_POSEFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace visual_servoing
{
template <class ContainerAllocator>
struct Tag_poseFeedback_ {
  typedef Tag_poseFeedback_<ContainerAllocator> Type;

  Tag_poseFeedback_()
  : found(false)
  , foundSure(false)
  , tag_x(0)
  , tag_y(0)
  {
  }

  Tag_poseFeedback_(const ContainerAllocator& _alloc)
  : found(false)
  , foundSure(false)
  , tag_x(0)
  , tag_y(0)
  {
  }

  typedef uint8_t _found_type;
  uint8_t found;

  typedef uint8_t _foundSure_type;
  uint8_t foundSure;

  typedef int32_t _tag_x_type;
  int32_t tag_x;

  typedef int32_t _tag_y_type;
  int32_t tag_y;


private:
  static const char* __s_getDataType_() { return "visual_servoing/Tag_poseFeedback"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b03174ea5876aa5520960cf25bc4b995"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback definition\n\
bool found\n\
bool foundSure\n\
int32 tag_x\n\
int32 tag_y\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, found);
    ros::serialization::serialize(stream, foundSure);
    ros::serialization::serialize(stream, tag_x);
    ros::serialization::serialize(stream, tag_y);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, found);
    ros::serialization::deserialize(stream, foundSure);
    ros::serialization::deserialize(stream, tag_x);
    ros::serialization::deserialize(stream, tag_y);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(found);
    size += ros::serialization::serializationLength(foundSure);
    size += ros::serialization::serializationLength(tag_x);
    size += ros::serialization::serializationLength(tag_y);
    return size;
  }

  typedef boost::shared_ptr< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Tag_poseFeedback
typedef  ::visual_servoing::Tag_poseFeedback_<std::allocator<void> > Tag_poseFeedback;

typedef boost::shared_ptr< ::visual_servoing::Tag_poseFeedback> Tag_poseFeedbackPtr;
typedef boost::shared_ptr< ::visual_servoing::Tag_poseFeedback const> Tag_poseFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace visual_servoing

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b03174ea5876aa5520960cf25bc4b995";
  }

  static const char* value(const  ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb03174ea5876aa55ULL;
  static const uint64_t static_value2 = 0x20960cf25bc4b995ULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "visual_servoing/Tag_poseFeedback";
  }

  static const char* value(const  ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback definition\n\
bool found\n\
bool foundSure\n\
int32 tag_x\n\
int32 tag_y\n\
\n\
\n\
";
  }

  static const char* value(const  ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.found);
    stream.next(m.foundSure);
    stream.next(m.tag_x);
    stream.next(m.tag_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Tag_poseFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::visual_servoing::Tag_poseFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found);
    s << indent << "foundSure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.foundSure);
    s << indent << "tag_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_x);
    s << indent << "tag_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISUAL_SERVOING_MESSAGE_TAG_POSEFEEDBACK_H


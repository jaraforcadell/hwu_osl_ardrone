"""autogenerated by genmsg_py from Pose.msg. Do not edit."""
import roslib.message
import struct

import ardrone_msgs.msg

class Pose(roslib.message.Message):
  _md5sum = "c4a280f87b43aa759c89cab10eed497e"
  _type = "ardrone_msgs/Pose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Vector3 real

Vector3 pixels

bool priority

================================================================================
MSG: ardrone_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['real','pixels','priority']
  _slot_types = ['ardrone_msgs/Vector3','ardrone_msgs/Vector3','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       real,pixels,priority
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Pose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.real is None:
        self.real = ardrone_msgs.msg.Vector3()
      if self.pixels is None:
        self.pixels = ardrone_msgs.msg.Vector3()
      if self.priority is None:
        self.priority = False
    else:
      self.real = ardrone_msgs.msg.Vector3()
      self.pixels = ardrone_msgs.msg.Vector3()
      self.priority = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6dB.pack(_x.real.x, _x.real.y, _x.real.z, _x.pixels.x, _x.pixels.y, _x.pixels.z, _x.priority))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.real is None:
        self.real = ardrone_msgs.msg.Vector3()
      if self.pixels is None:
        self.pixels = ardrone_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 49
      (_x.real.x, _x.real.y, _x.real.z, _x.pixels.x, _x.pixels.y, _x.pixels.z, _x.priority,) = _struct_6dB.unpack(str[start:end])
      self.priority = bool(self.priority)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6dB.pack(_x.real.x, _x.real.y, _x.real.z, _x.pixels.x, _x.pixels.y, _x.pixels.z, _x.priority))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.real is None:
        self.real = ardrone_msgs.msg.Vector3()
      if self.pixels is None:
        self.pixels = ardrone_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 49
      (_x.real.x, _x.real.y, _x.real.z, _x.pixels.x, _x.pixels.y, _x.pixels.z, _x.priority,) = _struct_6dB.unpack(str[start:end])
      self.priority = bool(self.priority)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6dB = struct.Struct("<6dB")
